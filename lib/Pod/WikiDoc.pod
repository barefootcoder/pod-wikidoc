# Generated by Pod::WikiDoc version 0.10 on Thu Sep 22 17:26:27 2005

=pod

=head1 NAME

Pod::WikiDoc - Generate Pod from inline wiki style text 

=head1 SYNOPSIS

In a source file, Pod format-block style:

     =begin wikidoc
 
     = POD FORMAT-BLOCK STYLE
 
     Write documentation with *bold*, ~italic~ or {code}
     markup.  Create a link to [Pod::WikiDoc].
 
         Indent for verbatim paragraphs
 
     * bullet
     * point
     * list
 
     0 sequentially
     0 numbered
     0 list
 
     = end wikidoc

In a source file, wikidoc comment-block style:

     ### = WIKIDOC COMMENT-BLOCK STYLE
     ###
     ### Optionally, [Pod::WikiDoc] can extract from
     ### specially-marked comment blocks

Generate Pod from wikidoc, programmatically:

     use Pod::WikiDoc;
     my $parser = Pod::WikiDoc->new( { comment_blocks => 1 } );
     $parser->filter( 
         { input => "my_module.pm", output => "my_module.pod" }
     );

Generate Pod from wikidoc, via command line:

     $ wikidoc -c my_module.pm my_module.pod

=head1 DESCRIPTION

Pod works well, but writing it can be time-consuming and tedious.  For example,
commonly used layouts like lists require numerous lines of text to make just
a couple of simple points.  An alternative approach is to write documentation
in a wiki-text shorthand (referred to here as I<wikidoc>) and use Pod::WikiDoc
to extract it and convert it into its corresponding Pod as a separate C<<< .pod >>>
file.

Documentation written in wikidoc may be embedded in Pod format blocks, or,
optionally, in specially marked comment blocks.  Wikidoc uses simple text-based
markup like wiki websites to indicate formatting and links.  (See 
L</WIKIDOC MARKUP>, below.)

Pod::WikiDoc processes text files (or text strings) by extracting both
existing Pod and wikidoc, converting the wikidoc to Pod, and then writing
the combined document back to a file or standard output. 

Summary of major features of Pod::WikiDoc:

=over

=item *

Extracts and converts wikidoc from Pod format blocks or special 
wikidoc comment blocks

=item *

Extracts and preserves existing Pod

=item *

Provides bold, italic, code, and link markup

=item *

Automatically converts special symbols in wikidoc to their
Pod escape equivalents, e.g. EE<lt>ltE<gt>, EE<lt>gtE<gt>

=item *

Preserves other Pod escape sequences, e.g. EE<lt>euroE<gt>

=back

In addition, Pod::WikiDoc provides a command-line utility, L<wikidoc>,
to simplify wikidoc translation.

See the L<Pod::WikiDoc::Cookbook> for more detailed usage examples.

=head1 INTERFACE


=head2 C<<< new >>>

     $parser = Pod::WikiDoc->new( \%args );

Constructor for a new Pod::WikiDoc object.  It takes a single, optional 
argument: a hash reference with the following optional keys:

=over

=item *

I<comment_blocks>: if true, Pod::WikiDoc will scan for wikidoc in comment
blocks.  Default is false.

=item *

I<comment_prefix_length>: the number of leading sharp (#) symbols to 
denote a comment block.  Default is 3.

=back

=head2 C<<< convert >>>

     my $pod_text = $parser->convert( $input_text );

Given a string with valid Pod andE<sol>or wikidoc markup, filterE<sol>translate it to
Pod.  This is really just a wrapper around C<<< filter >>> for working with
strings rather than files, and provides similar behavior, including adding
a 'Generated by' header.

=head2 C<<< filter >>>

     $parser->filter( \%args );

Filters from an input file for Pod and wikidoc, translating it to Pod 
and writing it to an output file.  The output file will be prefixed with
a 'Generated by' comment with the version of Pod::WikiDoc and timestamp,
as required by L<perlpodspec>.

C<<< filter >>> takes a single, optional argument: a hash reference with 
the following optional keys:

=over

=item *

I<input>: a filename or filehandle to read from. Defaults to STDIN.  

=item *

I<output>: a filename or filehandle to write to.  If given a filename
and the file already exists, it will be clobbered. Defaults to STDOUT.

=back

=head2 C<<< format >>>

     my $pod_text = $parser->format( $wiki_text );

Given a string with valid Pod andE<sol>or wikidoc markup, filterE<sol>translate it to
Pod. Unlike C<<< convert >>>, no 'Generated by' comment is added.

=head1 WIKIDOC MARKUP

Wikidoc is composed of both block and inline markup.

Block markup:

     = header level 1
 
     == header level 2

Inline markup:

     *bold*
 
     ~italic~
 
     [link]
 
     {monospace a.k.a. code}
 
     \*escapes
 
     E<euro> (regular Pod E<> markup for special symbols is passed through)

=head1 DIAGNOSTICS

=over

=item *

C<<< Error: Argument to convert() must be a scalar >>>

=item *

C<<< Error: Argument to filter() must be a hash reference >>>

=item *

C<<< Error: Argument to format() must be a scalar >>>

=item *

C<<< Error: Argument to new() must be a hash reference >>>

=item *

C<<< Error: Class method new() can't be called on an object >>>

=item *

C<<< Error: Couldn't open input file 'FILENAME' >>>

=item *

C<<< Error: Couldn't open output file 'FILENAME' >>>

=item *

C<<< Error: Invalid variable type for input file argument to filter() >>>

=item *

C<<< Error: Invalid variable type for output file argument to filter() >>>

=back

=head1 CONFIGURATION AND ENVIRONMENT

No configuration files or environment variables are used.

=head1 DEPENDENCIES

Pod::WikiDoc depends on the following modules:

=over

=item *

L<Getopt::Std>

=item *

L<IO::String>

=item *

L<Parse::RecDescent>

=item *

L<Scalar::Util>

=back

=head1 INCOMPATIBILITIES

Use of the wikidoc comment-blocks conflicts with L<Smart::Comments>.
Change the C<<< comment_prefix_length >>> argument to C<<< new >>> in Pod::WikiDoc or the level
of 'smartness' in L<Smart::Comments> to avoid the conflict.

=head1 BUGS

Please report bugs using the CPAN Request Tracker at 
L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Pod-WikiDoc>

=head1 AUTHOR

David A Golden (DAGOLDEN)

dagolden@cpan.org

L<http://dagolden.com/>

=head1 COPYRIGHT

Copyright (c) 2005 by David A Golden

This program is free software; you can redistribute
it andE<sol>or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.


